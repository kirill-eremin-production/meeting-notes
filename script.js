const { spawn } = require("child_process");
const fs = require("fs");
const path = require("path");

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Python —Å–∫—Ä–∏–ø—Ç —Å Whisper
 */
async function transcribe(videoPath, outputPath = "transcript.txt") {
  console.log(`üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: ${videoPath}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(videoPath)) {
    throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${videoPath}`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–∞
  const pythonScriptPath = path.join(__dirname, "script.py");
  if (!fs.existsSync(pythonScriptPath)) {
    throw new Error(`Python —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pythonScriptPath}`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python
  try {
    await checkPythonAvailable();
  } catch (error) {
    throw new Error(
      "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python: https://www.python.org/downloads/"
    );
  }

  console.log("üêç –ó–∞–ø—É—Å–∫–∞—é Python —Å–∫—Ä–∏–ø—Ç...");

  return new Promise((resolve, reject) => {
    const python = spawn("python3", [pythonScriptPath, videoPath, outputPath]);

    let stderr = "";

    python.stdout.on("data", (data) => {
      process.stdout.write(data);
    });

    python.stderr.on("data", (data) => {
      stderr += data.toString();
      process.stderr.write(data);
    });

    python.on("error", (error) => {
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python: ${error.message}`));
    });

    python.on("close", (code) => {
      if (code === 0) {
        console.log(`\n‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
        resolve(outputPath);
      } else {
        reject(
          new Error(
            `Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code}):\n${stderr}`
          )
        );
      }
    });
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Python –≤ —Å–∏—Å—Ç–µ–º–µ
 */
function checkPythonAvailable() {
  return new Promise((resolve, reject) => {
    const python = spawn("python3", ["--version"]);

    python.on("error", (error) => {
      reject(error);
    });

    python.on("close", (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error("Python –Ω–µ –Ω–∞–π–¥–µ–Ω"));
      }
    });
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python
 */
async function checkDependencies() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python...");

  return new Promise((resolve, reject) => {
    const python = spawn("python3", [
      "-c",
      "import whisper; import sys; import tqdm",
    ]);

    python.on("close", (code) => {
      if (code === 0) {
        console.log("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        resolve();
      } else {
        console.log("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python");
        console.log(
          "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip3 install openai-whisper tqdm"
        );
        reject(new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python"));
      }
    });
  });
}

// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if (require.main === module) {
  const args = process.argv.slice(2);

  if (args.length < 1) {
    console.log(
      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node script.js <–ø—É—Ç—å_–∫_–≤–∏–¥–µ–æ> [–ø—É—Ç—å_–∫_–≤—ã—Ö–æ–¥–Ω–æ–º—É_—Ñ–∞–π–ª—É]"
    );
    console.log("\n–ü—Ä–∏–º–µ—Ä—ã:");
    console.log("  node script.js video.mp4");
    console.log("  node script.js video.mp4 transcript.txt");
    console.log("  node script.js rec.m4a result.txt");
    console.log("\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:");
    console.log("  - Python 3.7+");
    console.log("  - pip3 install openai-whisper tqdm");
    process.exit(1);
  }

  const videoFile = args[0];
  const outputFile = args[1] || "transcript.txt";

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
  (async () => {
    try {
      await checkDependencies();
      const result = await transcribe(videoFile, outputFile);
      console.log(`\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: ${result}`);
    } catch (error) {
      console.error("\n‚ùå –û—à–∏–±–∫–∞:", error.message);
      process.exit(1);
    }
  })();
}

module.exports = { transcribe, checkDependencies };

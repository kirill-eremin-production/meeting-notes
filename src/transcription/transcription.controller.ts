import {
  Controller,
  Post,
  UseInterceptors,
  UploadedFile,
  HttpException,
  HttpStatus,
  Get,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { TranscriptionService } from './transcription.service';

@Controller('transcription')
export class TranscriptionController {
  constructor(private readonly transcriptionService: TranscriptionService) {}

  @Get('status')
  getStatus() {
    return {
      status: 'ok',
      message: '–°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç',
    };
  }

  @Post('upload')
  @UseInterceptors(FileInterceptor('audio'))
  async uploadAudio(@UploadedFile() file: Express.Multer.File) {
    if (!file) {
      throw new HttpException(
        '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω',
        HttpStatus.BAD_REQUEST,
      );
    }

    try {
      console.log(`üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: ${file.originalname} (${file.size} bytes)`);
      
      const result = await this.transcriptionService.transcribe(
        file.path,
        file.originalname,
      );

      return {
        success: true,
        message: '–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        data: result,
      };
    } catch (error) {
      throw new HttpException(
        {
          success: false,
          message: '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏',
          error: error.message,
        },
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
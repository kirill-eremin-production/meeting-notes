import { Injectable, Inject } from '@nestjs/common';
import { spawn } from 'child_process';
import { promises as fs } from 'fs';
import { join } from 'path';
import { v4 as uuidv4 } from 'uuid';
import { TranscriptionRepository } from './transcription.repository';
import { TranscriptionResult } from './transcription.types';

@Injectable()
export class TranscriptionService {
  constructor(
    @Inject('TRANSCRIPTION_REPOSITORY')
    private readonly repository: TranscriptionRepository,
  ) {}

  async createTranscription(filename: string): Promise<string> {
    const transcriptionId = uuidv4();
    const transcription: TranscriptionResult = {
      id: transcriptionId,
      status: 'pending',
      filename,
      createdAt: new Date(),
      progress: 0,
    };

    await this.repository.save(transcription);
    return transcriptionId;
  }

  async getTranscription(transcriptionId: string): Promise<TranscriptionResult | null> {
    return this.repository.findById(transcriptionId);
  }

  async startTranscription(
    transcriptionId: string,
    filePath: string,
    originalName: string,
  ): Promise<void> {
    const transcription = await this.repository.findById(transcriptionId);
    if (!transcription) {
      throw new Error('–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    transcription.status = 'processing';
    transcription.progress = 0;
    await this.repository.save(transcription);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    this.transcribe(transcriptionId, filePath, originalName).catch((error) => {
      console.error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:', error);
    });
  }

  private async transcribe(
    transcriptionId: string,
    filePath: string,
    originalName: string,
  ): Promise<void> {
    const transcription = await this.repository.findById(transcriptionId);
    if (!transcription) {
      return;
    }

    try {
      console.log(`üé¨ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é ${transcriptionId}: ${originalName}`);

      // –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
      const outputPath = filePath.replace(/\.[^/.]+$/, '.txt');

      // –ü—É—Ç—å –∫ Python —Å–∫—Ä–∏–ø—Ç—É (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
      const pythonScriptPath = join(process.cwd(), 'script.py');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–∞
      try {
        await fs.access(pythonScriptPath);
      } catch (error) {
        throw new Error(`Python —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pythonScriptPath}`);
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      await this.runPythonScript(
        transcriptionId,
        pythonScriptPath,
        filePath,
        outputPath,
      );

      // –ß–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const transcript = await fs.readFile(outputPath, 'utf-8');

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      try {
        await fs.unlink(filePath);
        await fs.unlink(outputPath);
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:', error);
      }

      console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ${transcriptionId}: ${originalName}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      const finalTranscription = await this.repository.findById(transcriptionId);
      if (finalTranscription) {
        finalTranscription.status = 'completed';
        finalTranscription.transcript = transcript;
        finalTranscription.completedAt = new Date();
        finalTranscription.progress = 100;
        await this.repository.save(finalTranscription);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ ${transcriptionId}:`, error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π
      const errorTranscription = await this.repository.findById(transcriptionId);
      if (errorTranscription) {
        errorTranscription.status = 'error';
        errorTranscription.error = error.message;
        errorTranscription.completedAt = new Date();
        await this.repository.save(errorTranscription);
      }
    }
  }

  private async updateProgress(
    transcriptionId: string,
    progress: number,
    currentText?: string,
  ): Promise<void> {
    const transcription = await this.repository.findById(transcriptionId);
    if (transcription) {
      transcription.progress = progress;
      if (currentText) {
        transcription.currentText = currentText;
      }
      await this.repository.save(transcription);
    }
  }

  private runPythonScript(
    transcriptionId: string,
    scriptPath: string,
    inputPath: string,
    outputPath: string,
  ): Promise<void> {
    return new Promise((resolve, reject) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const venvPython = join(process.cwd(), 'venv', 'bin', 'python');
      const pythonCommand = require('fs').existsSync(venvPython) ? venvPython : 'python3';
      
      const python = spawn(pythonCommand, [scriptPath, inputPath, outputPath]);

      let stderr = '';
      let stdoutBuffer = '';

      python.stdout.on('data', async (data) => {
        const output = data.toString();
        stdoutBuffer += output;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è JSON
        const lines = stdoutBuffer.split('\n');
        stdoutBuffer = lines.pop() || ''; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É

        for (const line of lines) {
          if (line.trim()) {
            try {
              const jsonData = JSON.parse(line);
              
              if (jsonData.type === 'progress') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                await this.updateProgress(
                  transcriptionId,
                  jsonData.progress,
                  jsonData.currentText,
                );
                console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å ${transcriptionId}: ${jsonData.progress}%`);
              } else if (jsonData.type === 'complete') {
                console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${jsonData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
              }
            } catch (error) {
              // –ù–µ JSON —Å—Ç—Ä–æ–∫–∞, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ª–æ–≥
              console.log(line);
            }
          }
        }
      });

      python.stderr.on('data', (data) => {
        stderr += data.toString();
        console.error(data.toString());
      });

      python.on('error', (error) => {
        reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python: ${error.message}`));
      });

      python.on('close', (code) => {
        if (code === 0) {
          resolve();
        } else {
          reject(
            new Error(
              `Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code}):\n${stderr}`,
            ),
          );
        }
      });
    });
  }
}
import { Injectable } from '@nestjs/common';
import { spawn } from 'child_process';
import { promises as fs } from 'fs';
import { join } from 'path';

@Injectable()
export class TranscriptionService {
  async transcribe(filePath: string, originalName: string): Promise<{
    transcript: string;
    filename: string;
    duration?: number;
  }> {
    console.log(`üé¨ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é: ${originalName}`);

    // –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    const outputPath = filePath.replace(/\.[^/.]+$/, '.txt');

    // –ü—É—Ç—å –∫ Python —Å–∫—Ä–∏–ø—Ç—É (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
    const pythonScriptPath = join(process.cwd(), 'script.py');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–∞
    try {
      await fs.access(pythonScriptPath);
    } catch (error) {
      throw new Error(`Python —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pythonScriptPath}`);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
    await this.runPythonScript(pythonScriptPath, filePath, outputPath);

    // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const transcript = await fs.readFile(outputPath, 'utf-8');

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    try {
      await fs.unlink(filePath);
      await fs.unlink(outputPath);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:', error);
    }

    console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${originalName}`);

    return {
      transcript,
      filename: originalName,
    };
  }

  private runPythonScript(
    scriptPath: string,
    inputPath: string,
    outputPath: string,
  ): Promise<void> {
    return new Promise((resolve, reject) => {
      const python = spawn('python3', [scriptPath, inputPath, outputPath]);

      let stderr = '';

      python.stdout.on('data', (data) => {
        console.log(data.toString());
      });

      python.stderr.on('data', (data) => {
        stderr += data.toString();
        console.error(data.toString());
      });

      python.on('error', (error) => {
        reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python: ${error.message}`));
      });

      python.on('close', (code) => {
        if (code === 0) {
          resolve();
        } else {
          reject(
            new Error(
              `Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code}):\n${stderr}`,
            ),
          );
        }
      });
    });
  }
}
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é Whisper
"""

import sys
import whisper
from pathlib import Path


def transcribe_file(input_file: str, output_file: str, model_size: str = "small"):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é Whisper
    
    Args:
        input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
        model_size: –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ Whisper (tiny, base, small, medium, large)
    """
    input_path = Path(input_file)
    
    if not input_path.exists():
        raise FileNotFoundError(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
    
    print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_path.name}")
    print(f"üìù –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model_size}")
    print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper
    print("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper...")
    model = whisper.load_model(model_size)
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print()
    
    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Ñ–∞–π–ª
    print("üéôÔ∏è  –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
    result = model.transcribe(str(input_path))
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    text = result.get("text", "").strip()
    language = result.get("language", "unknown")
    
    if not text:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = Path(output_file)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    output_path.write_text(text, encoding="utf-8")
    
    print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –Ø–∑—ã–∫: {language}")
    print(f"   - –°–∏–º–≤–æ–ª–æ–≤: {len(text)}")
    print(f"   - –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path.absolute()}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    if len(sys.argv) < 3:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 script.py <–≤—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª> <–≤—ã—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª> [—Ä–∞–∑–º–µ—Ä_–º–æ–¥–µ–ª–∏]")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python3 script.py rec.m4a transcript.txt")
        print("  python3 script.py video.mp4 output.txt medium")
        print()
        print("–†–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏: tiny, base, small, medium, large")
        print("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: medium")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    model_size = sys.argv[3] if len(sys.argv) > 3 else "small"
    
    try:
        transcribe_file(input_file, output_file, model_size)
    except Exception as error:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {error}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()